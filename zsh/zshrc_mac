export ZSH=$HOME/.oh-my-zsh
SHELL="/bin/zsh"

# {{ 主题设置  ----------▼
#ZSH_THEME="gruvbox"
# ZSH_THEME="candy"
# ZSH_THEME="clean"
ZSH_THEME="crcandy"
#ZSH_THEME="dstufft"
# ZSH_THEME="dst"
# ZSH_THEME="intheloop"
SOLARIZED_THEME="dark"
#ZSH_THEME="spaceship-prompt/spaceship"
# }}

# {{ 常规设置  ----------▼
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export COMPLETION_WAITING_DOTS="true"
export UPDATE_ZSH_DAYS=14

# 禁用自动更新
#DISABLE_UPDATE_PROMPT=true

# 解决粘贴慢
DISABLE_MAGIC_FUNCTIONS=true

# 使用区分大小写的命令补全
# CASE_SENSITIVE="true"

# 使用连字符不敏感的补全。区分大小写的补全必须关闭。_和-是通用的
# HYPHEN_INSENSITIVE="true"

# 关闭每两周一次的自动检查更新
# DISABLE_AUTO_UPDATE="true"

# 关闭ls的颜色.
# DISABLE_LS_COLORS="true"

# 关闭自动设置终端的标题
# DISABLE_AUTO_TITLE="true"

# 开启命令自动更正
# ENABLE_CORRECTION="true"

# 展示在等待完成时显示红点
# COMPLETION_WAITING_DOTS="true"

# 关闭将VCS下未跟踪的文件标记为脏文件。使得大型存储库的存储库状态检查更加快速。
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# 在历史命令行输出的命令执行时间戳，有可选的三种格式
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
HIST_STAMPS="yyyy-mm-dd"

# 设置 $ZSH/custom 外的自定义文件夹
# ZSH_CUSTOM=/path/to/new-custom-folder

# 手动设置语言环境
# export LANG=en_US.UTF-8

source $ZSH/oh-my-zsh.sh
source ~/.bash_profile
# }}


# {{ 插件配置 ----------▼
plugins=(adb,
  autojump,
  brew,
  git,
  sudo,
  zsh-compinit,
  zsh-syntax-highlighting,
  zsh-autosuggestions,
  fzf-tab,
)
autoload -U compinit && compinit

# {{ zplug 配置 ----------▼
source $HOME/.zplug/init.zsh
## zplug 插件列表
zplug 'zplug/zplug', hook-build:'zplug --self-manage'
zplug "zsh-users/zsh-completions"
zplug 'lincheney/fzf-tab-completion'
zplug 'leophys/zsh-plugin-fzf-finder'
zplug 'yuki-yano/zeno.zsh'
zplug 'yuki-yano/fzf-preview.zsh'
zplug 'zsh-users/zsh-autosuggestions'
zplug 'Aloxaf/fzf-tab'  # 放在插件列表最后一个
# 主题
# zplug 'dracula/zsh', as:theme

## 列表中没有安装的插件，提示安装
if ! zplug check --verbose; then
    printf "Install? [y/n]: "
    if read -q; then
        echo; zplug install
    fi
fi
zplug load
# }}


# {{ Autojump 配置 ----------▼
[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] && . $(brew --prefix)/etc/profile.d/autojump.sh
# }}

# {{ PATH 配置 ----------▼
## Home Bin
export HOMEBIN="${PATH}:$HOME/.local/bin"

## Android PATH
export ANDROID="${PATH}:$HOME/.local/platform-tools"

## Luajit-openresty PATH
export PATH="/usr/local/opt/luajit-openresty/bin:$PATH"
export LDFLAGS="-L/usr/local/opt/luajit-openresty/lib"
export CPPFLAGS="-I/usr/local/opt/luajit-openresty/include"

## Final PATH
export PATH="${PATH}:/usr/local/bin:,
/usr/local/sbin:,
/usr/bin:,
/bin:,
/usr/sbin:,
$HOMEBIN:,
$ANDROID"
# }}


# {{ Linux Man文件 ----------▼
# export MANPATH="/usr/local/man:$MANPATH"  # Linux增加自定义path
# }}


# {{ Nvm 配置 ----------▼
# export NVM_DIR="$HOME/.nvm"
# . $(brew --prefix nvm)/nvm.sh
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
## npm淘宝源
export NVM_NODEJS_ORG_MIRROR="https://npm.taobao.org/dist"

## nvm与shell深度集成，放在nvm配置后面
autoload -U add-zsh-hook
load-nvmrc() {
  local node_version="$(nvm version)"
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  elif [ "$node_version" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc
# }}


# {{ Goenv ----------▼
export GOENV_ROOT="$HOME/.config/goenv"
export PATH="$GOENV_ROOT/bin:$PATH"
eval "$(goenv init -)"
export PATH="$GOROOT/bin:$PATH"
export PATH="$PATH:$GOPATH/bin"
export GO111MODULE="on"
export GOPROXY="https://goproxy.io,direct"
# }}


# {{ Pyenv ----------▼
export PYENV_ROOT="$HOME/.config/pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init --path)"
# pyenv-virtualenv
eval "$(pyenv virtualenv-init -)"
# }}


# {{ Pipenv Path ----------▼
#eval "$(pipenv --completion)"
#eval "$(pyenv virtualenv-init -)"
# }}


# {{ Ruby PATH ----------▼
# export PATH="/usr/local/opt/ruby/bin:$PATH"
# export LDFLAGS="-L/usr/local/opt/ruby/lib"
# export CPPFLAGS="-I/usr/local/opt/ruby/include"
# export PKG_CONFIG_PATH="/usr/local/opt/ruby/lib/pkgconfig"
# }}


# {{ Rvm Path ----------▼
#export PATH="$PATH:$HOME/.rvm/bin"
# }}


# {{ Java Path ----------▼
#export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home
#export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home
# }}


# {{ Calibre ----------▼
#export PATH=${PATH}:/Applications/Productivity/calibre.app/Contents/MacOS
# }}


# {{ 配置本地和远程服务器首选编辑器
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi
# }}


# {{ 编译标志 ----------▼
# export ARCHFLAGS="-arch x86_64"
# }}


# {{ SSH ----------▼
# export SSH_KEY_PATH="~/.ssh/dsa_id"
# }}


# {{ .aliases ----------▼
if [ -f ~/.aliases ]; then
     . ~/.aliases
fi
source ~/.aliases
# }}


# {{ .dircolors 修改默认终端配色 ----------▼
if [ -x "$(command -v dircolors)" ]; then
    eval "$(dircolors -b ~/.dircolors)"
fi
# }}


# {{ Homebrew 使用清华源 ----------▼
#export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles
#export PATH="/usr/local/opt/gnu-getopt/bin:$PATH"
# }}


# {{ catalog ----------▼
export XML_CATALOG_FILES="/usr/local/etc/xml/catalog"
# }}


# {{ guu-getopt
export PATH="/usr/local/opt/gnu-getopt/bin:$PATH"
# }}


# {{ LLVM ----------▼
# export PATH="/usr/local/opt/llvm/bin:$PATH"
# export LDFLAGS="-L/usr/local/opt/llvm/lib"
# export CPPFLAGS="-I/usr/local/opt/llvm/include"
# }}


# {{ nnn ----------▼
export NNN_PLUG='f:finder;o:fzopen;p:mocplay;d:diffs;t:nmount;v:imgview'
# }}


# {{ fzf ----------▼
# 键绑定和模糊补全
# $(brew --prefix)/usr/local/opt/fzf/install
# 使用外部查询命令 fd find 设置，并忽略指定文件类型
# export FZF_DEFAULT_COMMAND="fd --exclude={.git,.idea,.vscode,.sass-cache,node_modules,build} --type f"

## fzf 预览窗口配置，使用 py 脚本预览
# export FZF_DEFAULT_OPTS='--height 90% --layout=reverse --bind=alt-j:down,alt-k:up,alt-i:toggle+down --border --preview "echo {} | ~/.local/script/fzf_preview.py" --preview-window=down'
# export FZF_DEFAULT_OPTS="--height 90% --layout=reverse --border --preview '(highlight -O ansi {} || cat {}) 2> /dev/null | head -500'"

## 通过fd查询，如果是文件夹直接进入
# fd() {
#   local dir
#   dir=$(find ${1:-.} -path '*/\.*' -prune \
#       -o -type d -print 2> /dev/null | fzf +m) &&
#   cd "$dir"
# }

## 通过 fkill 结束进程
# fkill() {
#   local pid
#   pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

#   if [ "x$pid" != "x" ]
#   then
# 	echo $pid | xargs kill -${1:-9}
#   fi
# }

# }} end


# {{ Tmux: Fix error on Mac OS ----------▼
export EVENT_NOKQUEUE=1

## 配合 Tmux 使用
tm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
	tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# Tmux: 如果 session 不存在则会自动创建，使用 fs 可以快速选择目前可用的 session
fs() {
  local session
  session=$(tmux list-sessions -F "#{session_name}" | \
    fzf --query="$1" --select-1 --exit-0) &&
  tmux switch-client -t "$session"
}
# }}


# {{ fzf-tab ----------▼
zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup
zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
local extract="
in=\${\${\"\$(<{f})\"%\$'\0'*}#*\$'\0'}
local -A ctxt=(\"\${(@ps:\2:)CTXT}\")
"
zstyle ':fzf-tab:complete:cd:*' extra-opts --preview=$extract'exa -1 --color=always ${~ctxt[hpre]}$in'
zstyle ':fzf-tab:complete:kill:argument-rest' extra-opts --preview=$extract'ps --pid=$in[(w)1] -o cmd --no-headers -w -w' --preview-window=down:3:wrap
# }}