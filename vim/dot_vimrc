autocmd! bufwritepost .vimrc source ~/.vimrc    "vimrc文件修改后自动载入

"==========主题界面==========
"colorscheme Tomorrow-Night-Bright
colorscheme gruvbox




"==========基础设置==========
syntax on           "语法高亮

set nocompatible        "不使用vi键盘模式，使用vim自己的
"set background=dark     "背景使用黑色
set number            	"显示行号
set guifont=Monaco_for_Powerline:h14   "设置字体，字体名称和字号
set cursorline
set showcmd
set scrolloff=3
set autoread            "文件在Vim之外修改过，自动重新读入
set ruler               "显示位置指示器
set laststatus=1        "始终显示状态栏
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}             "状态行显示的内容 
set history=500         "纪录历史纪录行数
set autoindent          "自动缩进
"set smartindent         "智能选择对齐方式
set tabstop=4           "设置tab键为4个空格
set shiftwidth=4        "设定自动缩进为4个字符
set expandtab           "用空格键替代tab的输入
set showmatch           "匹配模式，输入一个左括号时会匹配相应的那个右括号
set incsearch           "输入／搜索词，会自动找到第一个匹配项 
set ignorecase          "搜索时忽略大小写
set helplang=cn         "帮助系统设置为中文
set foldmethod=syntax   "代码折叠
set hlsearch            "搜索高亮显示
set incsearch
set nobackup            "以下两项禁止生成临时文件  
set noswapfile
set pastetoggle=<F3>    "解决插入缩进问题，粘贴前按下F3，完毕后再按F3退出




"==========快捷键设置==========
"行代码上移(alt+k)下移(alt+j)
nnoremap ∆ :m .+1<CR>==
nnoremap ˚ :m .-2<CR>==
inoremap ∆ <Esc>:m .+1<CR>==gi
inoremap ˚ <Esc>:m .-2<CR>==gi
vnoremap ∆ :m '>+1<CR>gv=gv
vnoremap ˚ :m '<-2<CR>gv=gv
"2019-11-05 update
nmap - yy dd    "设置快捷键：按 - 键，剪切当前行内容到剪贴板



"==========Vim-Plug安装插件==========
call plug#begin('~/.vim/plugged')
Plug 'junegunn/vim-easy-align'
Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'}
Plug 'plasticboy/vim-markdown'
Plug 'dhruvasagar/vim-table-mode'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'morhetz/gruvbox'   "Theme
call plug#end()
"PlugInstall = 安装插件
"PlugUpdate = 更新插件
"PlugClean[!] = 清理已卸载插件
"PlugUpgrade = 升级vim-plug插件
"PlugStatus = 检测插件状态
"如安装到其他路径：Plug 'xxx/xxx', {'dir': '~/.vim/xxx'}       ""Theme




"==========插件参数配置==========

"vim-airline配置----------
let g:airline#extensions#tabline#enabled = 1    "是否开启: 0:关闭、1:开启
let g:airline#extensions#tabline#left_sep = ' ' "为制表行单独配置分隔符
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'jsformatter'      "可选参数: default、jsformatter、unique_tail、unique_tail_improved

"NERDTree配置----------
autocmd StdinReadPre * let s:std_in=1
autocmd vimenter * NERDTree     "打开vim时自动打开NERDTree
autocmd vimenter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif   "当NERDTree是唯一窗口时自动关闭
autocmd vimenter * if !argc()|NERDTree|endif    "打开vim时如果没有文件自动打开NERDTree
"let NERDTreeChDirMode=2        ""选中root即设置为当前目录
"let NERDTreeDirArrows=0        "目录箭头 1:显示箭头、0:传统+-号; 
let NERDTreeWinPos='right'      "目录树位置 0/left:左侧、1/right:右侧
let NERDTreeQuitOnOpen=0        "打开文件时关闭树
let g:NERDTreeSize=30           "窗口尺寸
let NERDTreeShowBookmarks=1     "显示书签
let g:NERDTreeShowLineNumbers=0 "窗口显示行号 0:不显示、1:显示
let g:NERDTreeHidden=0          "不显示隐藏文件
let NERDTreeMinimalUI=1         "不显示帮助面板
"设置ctrl+n新建
map <C-n> :NERDTreeToggle<CR>
"设置F2为目录开关
map <silent> <F2> :execute 'NERDTreeToggle ' . getcwd()<CR>
"End

"Emmet配置----------
"触发快捷键改为<command+e>
"let g:user_emmet_expandabbr_key = '<C-e>'
let g:user_emmet_expandabbr_key = '<F3>'
"设置Emmet只对html/css启用
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall
"End

"vim-easy-align配置----------
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

"Vim Table Mode配置----------
let g:table_mode_corner = '|'           "用此选项定义表角字符
"let g:table_mode_delimiter = ' '       "使用此选项定义要使用的分隔符
let g:table_mode_border=0
let g:table_mode_fillchar=' '

function! s:isAtStartOfLine(mapping)
  let text_before_cursor = getline('.')[0 : col('.')-1]
  let mapping_pattern = '\V' . escape(a:mapping, '\')
  let comment_pattern = '\V' . escape(substitute(&l:commentstring, '%s.*$', '', ''), '\')
  return (text_before_cursor =~? '^' . ('\v(' . comment_pattern . '\v)?') . '\s*\v' . mapping_pattern . '\v$')
endfunction
inoreabbrev <expr> <bar><bar>
          \ <SID>isAtStartOfLine('\|\|') ?
          \ '<c-o>:TableModeEnable<cr><bar><space><bar><left><left>' : '<bar><bar>'
inoreabbrev <expr> __
          \ <SID>isAtStartOfLine('__') ?
          \ '<c-o>:silent! TableModeDisable<cr>' : '__'
"使用方法：在任意空行插入||,然后退出插入模式即可启用表格格式化插件.
"End

"Pydiction配置(python代码片段)----------
"filetype plugin on
"let g:pydiction_location = '~/.vim/plugged/pydiction/complete-dict'
"let g:pydiction_menu_height = 69     "提示显示数量
"End




"==========其他设置==========
"设置中文编码----------
if has("multi_byte")
        set encoding=utf-8
        set termencoding=utf-8
        set formatoptions+=mM
        set fencs=utf-8,gbk
        if v:lang =~? '^\(zh\)\|\(ja\)\|\(ko\)'
                set ambiwidth=double
        endif
endif
"End